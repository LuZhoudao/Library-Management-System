package myOracle;

import java.util.Scanner;
import java.util.Vector;

public class COLLECTION {
    public String BOOK_ID;
    public String ISBN;
    public boolean STATE;
    public String LOCATION;
    private final boolean INITIALIZE_STATE = false;
    static boolean flag = false;


    private static String result;

    public COLLECTION(String BOOK_ID, String ISBN, boolean STATE, String LOCATION, boolean INITIALIZE_STATE) {
        this.BOOK_ID = BOOK_ID;
        this.ISBN = ISBN;
        this.STATE = STATE;
        this.LOCATION = LOCATION;
    }
    public COLLECTION() {};

    public static String generateBOOK_ID() {
        return Tools.Random_int(15);
    }


    public static COLLECTION getFromInput_Instance(String isbn) {
        COLLECTION collection = new COLLECTION();
        System.out.println("Please input COLLECTION information (input nothing to represent the null value):\n");
        collection.BOOK_ID = generateBOOK_ID();
        System.out.println("The BOOK_ID have been generated by the system. which is " +  collection.BOOK_ID);
        collection.ISBN = isbn;
        collection.STATE = getFromInput_STATE();
        if (flag){
            System.out.println("ALREADY QUIT");
            flag = false;
            return null; }
        collection.LOCATION = getFromInput_LOCATION();
        if (collection.LOCATION == "*"){ return null; }
        return collection;
    }

    public static boolean isValidBOOK_ID(String BOOK_ID) {
        if(BOOK_ID.length()!=15){
            return false;
        }
        for(int i=0;i<15;i++){
            if(BOOK_ID.charAt(i)<'0'||BOOK_ID.charAt(i)>'9'){
                return false;
            }
        }
        return true;
    }

    public static String getFromInput_BOOK_ID() {
        System.out.println("input the BOOK_ID (a string with 15 number character e.g. 123456789054321):[input * quit]");
        Scanner input=new Scanner(System.in);
        result=input.nextLine();
        while(!isValidBOOK_ID(result)){
            if(result.equals("*")){
                System.out.println("ALREADY QUIT");
                return "*";
            }
            System.out.println("the input is invalid, please input again:(input * quit)");
            result=input.nextLine();
        }
        return result;
    }

    public static boolean isValidISBN(String ISBN) {
        if(!Tools.is_Valid_String(13,13,ISBN,false)){
            return false;
        }
        return true;
    }

    public static String getFromInput_ISBN() {
        System.out.println("input the ISBN (a string with 13 number character e.g. 1234567890123):[input * quit]");
        Scanner input=new Scanner(System.in);
        result=input.nextLine();
        while(!isValidISBN(result)){
            if(result.equals("*")){
                System.out.println("ALREADY QUIT");
                return "*";
            }
            System.out.println("the input is invalid, please input again:(input * quit)");
            result=input.nextLine();
        }
        return result;
    }

    public static boolean isValidSTATE(String STATE) {
        STATE=STATE.toLowerCase();
        if(STATE.equals("true") || STATE.equals("false") || STATE.equals("*")){
            return true;
        }
        return false;
    }

    public static boolean getFromInput_STATE() {
        System.out.println("input the STATE (true / false):[input * quit]");
        Scanner input=new Scanner(System.in);
        result = input.nextLine();
        while(!isValidSTATE(result)){
            System.out.println("the input is invalid,please input again:(input * quit)");
            result=input.nextLine();
        }
        if(result.equals("*")){
            flag=true;
            return false;
        }
        boolean res = Boolean.parseBoolean(result);
        return res;
    }

    public static boolean isValidLOCATION(String LOCATION) {
        if(!Tools.is_Valid_String(1,30,LOCATION,false)){
            return false;
        }
        return true;
    }

    public static String getFromInput_LOCATION() {
        System.out.println("input the LOCATION (a string has 1 to 30 characters e.g. A part 11 line):[input * quit]");
        Scanner input=new Scanner(System.in);
        result=input.nextLine();
        while(!isValidLOCATION(result)){
            if(result.equals("*")){
                System.out.println("ALREADY QUIT");
                return "*";
            }
            System.out.println("the input is invalid, please input again:(input * quit)");
            result=input.nextLine();
        }
        return result;
    }


    public static void printObject(COLLECTION o) {
        String ISBN = String.format("%-15s",o.ISBN).replace(' ',' ');
        String BOOK_ID = String.format("%-17s",o.BOOK_ID).replace(' ',' ');
        String STATE= String.format("%-7s",o.STATE).replace(' ',' ');
        String LOCATION;
        if(o.LOCATION != null){
            LOCATION = String.format("%-32s",o.LOCATION.strip()).replace(' ',' ');;
        }
        else{
            LOCATION = String.format("%-32s", "null").replace(' ',' ');;
        }
        System.out.print(ISBN);
        System.out.print(BOOK_ID);
        System.out.print(STATE);
        System.out.println(LOCATION);
    }

    public static void printTable(Vector<COLLECTION> ivec) {
        System.out.println("COLLECTION");
        System.out.print("    ");
        System.out.print(String.format("%-15s","ISBN").replace(' ',' '));
        System.out.print(String.format("%-17s","BOOK_ID").replace(' ',' '));
        System.out.print(String.format("%-7s","STATE").replace(' ',' '));
        System.out.println(String.format("%-32s","LOCATION").replace(' ',' '));
        for(int i = 0, m = 1; i < ivec.size(); i++){
            System.out.print("("+ m++ + "" + ")");
            System.out.println(Tools.getNChar("-", Tools.LEN));
            System.out.print("    ");
            if(ivec.get(i) == null){
                System.out.println("This table is empty");
            }
            else{
                ivec.get(i).printObject(ivec.get(i));
            }
        }
    }
}
